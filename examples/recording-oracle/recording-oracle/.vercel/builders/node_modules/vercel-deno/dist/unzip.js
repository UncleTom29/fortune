"use strict";
/**
 * Code modified from `extract-zip` to accept Buffer.
 * https://github.com/maxogden/extract-zip/blob/master/index.js
 * BSD-2 Copyright (c) 2014 Max Ogden and other contributors
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unzip = void 0;
const path_1 = __importDefault(require("path"));
// @ts-ignore - missing types
const promisepipe_1 = __importDefault(require("promisepipe"));
const fs = __importStar(require("fs-extra"));
const build_utils_1 = require("@vercel/build-utils");
const yauzl_promise_1 = require("yauzl-promise");
async function* createZipIterator(zipFile) {
    let entry;
    while ((entry = await zipFile.readEntry()) !== null) {
        yield entry;
    }
}
async function unzip(buffer, dir) {
    const zipFile = await (0, yauzl_promise_1.fromBuffer)(buffer);
    for await (const entry of createZipIterator(zipFile)) {
        if (entry.fileName.startsWith('__MACOSX/'))
            continue;
        try {
            const destDir = path_1.default.dirname(path_1.default.join(dir, entry.fileName));
            await fs.mkdirp(destDir);
            const canonicalDestDir = await fs.realpath(destDir);
            const relativeDestDir = path_1.default.relative(dir, canonicalDestDir);
            if (relativeDestDir.split(path_1.default.sep).includes('..')) {
                throw new Error(`Out of bound path "${canonicalDestDir}" found while processing file ${entry.fileName}`);
            }
            await extractEntry(zipFile, entry, dir);
        }
        catch (err) {
            await zipFile.close();
            throw err;
        }
    }
}
exports.unzip = unzip;
async function extractEntry(zipFile, entry, dir) {
    const dest = path_1.default.join(dir, entry.fileName);
    // convert external file attr int into a fs stat mode int
    const mode = (entry.externalFileAttributes >> 16) & 0xffff;
    // check if it's a symlink or dir (using stat mode constants)
    const IFMT = 61440;
    const IFDIR = 16384;
    const IFLNK = 40960;
    const symlink = (mode & IFMT) === IFLNK;
    let isDir = (mode & IFMT) === IFDIR;
    // Failsafe, borrowed from jsZip
    if (!isDir && entry.fileName.endsWith('/')) {
        isDir = true;
    }
    // check for windows weird way of specifying a directory
    // https://github.com/maxogden/extract-zip/issues/13#issuecomment-154494566
    const madeBy = entry.versionMadeBy >> 8;
    if (!isDir)
        isDir = madeBy === 0 && entry.externalFileAttributes === 16;
    const procMode = getExtractedMode(mode, isDir) & 0o777;
    // always ensure folders are created
    const destDir = isDir ? dest : path_1.default.dirname(dest);
    const mkdirOptions = { recursive: true };
    if (isDir) {
        // @ts-ignore
        mkdirOptions.mode = procMode;
    }
    await fs.mkdir(destDir, mkdirOptions);
    if (isDir)
        return;
    const readStream = await zipFile.openReadStream(entry);
    if (symlink) {
        const link = await (0, build_utils_1.streamToBuffer)(readStream);
        await fs.symlink(link.toString('utf8'), dest);
    }
    else {
        await (0, promisepipe_1.default)(readStream, fs.createWriteStream(dest, { mode: procMode }));
    }
}
function getExtractedMode(entryMode, isDir) {
    let mode = entryMode;
    // Set defaults, if necessary
    if (mode === 0) {
        if (isDir) {
            mode = 0o755;
        }
        else {
            mode = 0o644;
        }
    }
    return mode;
}
//# sourceMappingURL=unzip.js.map