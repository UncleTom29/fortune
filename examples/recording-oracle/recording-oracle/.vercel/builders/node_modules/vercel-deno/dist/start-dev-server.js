"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDevServer = exports.shouldServe = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = require("os");
const child_process_1 = require("child_process");
const once_1 = __importDefault(require("@tootallnate/once"));
const path_1 = require("path");
const build_utils_1 = require("@vercel/build-utils");
Object.defineProperty(exports, "shouldServe", { enumerable: true, get: function () { return build_utils_1.shouldServe; } });
const abort_controller_1 = require("abort-controller");
const shebang = __importStar(require("./shebang"));
const config_1 = require("./config");
const util_1 = require("./util");
const { readFile, unlink } = fs_1.default.promises;
const TMP = (0, os_1.tmpdir)();
function isPortInfo(v) {
    return v && typeof v.port === 'number';
}
function isReadable(v) {
    return v && v.readable === true;
}
const startDevServer = async ({ entrypoint, workPath, config, meta = {}, }) => {
    // @deprecated
    const unstable = (0, config_1.configBool)(config, 'denoUnstable', meta.buildEnv || {}, 'DENO_UNSTABLE') || false;
    // @deprecated
    const denoTsConfig = (0, config_1.configString)(config, 'tsconfig', meta.buildEnv || {}, 'DENO_TSCONFIG');
    const portFile = (0, path_1.join)(TMP, `vercel-deno-port-${Math.random().toString(32).substring(2)}`);
    const absEntrypoint = (0, path_1.join)(workPath, entrypoint);
    const absEntrypointDir = (0, path_1.dirname)(absEntrypoint);
    const env = {
        ...process.env,
        ...meta.env,
        VERCEL_DEV_ENTRYPOINT: absEntrypoint,
        VERCEL_DEV_PORT_FILE: portFile,
    };
    const args = shebang.parse(await readFile(absEntrypoint, 'utf8'));
    // @deprecated
    if (unstable) {
        console.log('DENO_UNSTABLE env var is deprecated');
        args['--unstable'] = true;
    }
    // Flags that accept file paths are relative to the entrypoint in
    // the source file, but `deno run` is executed at the root directory
    // of the project, so the arguments need to be relativized to the root
    for (const flag of [
        '--cert',
        '--config',
        '--import-map',
        '--lock',
    ]) {
        const val = args[flag];
        if (typeof val === 'string' && !(0, util_1.isURL)(val)) {
            args[flag] = (0, path_1.relative)(workPath, (0, path_1.resolve)(absEntrypointDir, val));
        }
    }
    // @deprecated
    if (denoTsConfig && !args['--config']) {
        console.log('DENO_TSCONFIG env var is deprecated');
        args['--config'] = denoTsConfig;
    }
    const argv = [
        'run',
        '--allow-all',
        ...args,
        (0, path_1.join)(__dirname, 'dev-server.ts'),
    ];
    const child = (0, child_process_1.spawn)('deno', argv, {
        cwd: workPath,
        env,
        stdio: ['ignore', 'inherit', 'inherit', 'pipe'],
    });
    const portPipe = child.stdio[3];
    if (!isReadable(portPipe)) {
        throw new Error('Not readable');
    }
    const controller = new abort_controller_1.AbortController();
    const { signal } = controller;
    const onPort = new Promise((resolve) => {
        portPipe.setEncoding('utf8');
        portPipe.once('data', (d) => {
            resolve({ port: Number(d) });
        });
    });
    const onPortFile = waitForPortFile({ portFile, signal });
    const onExit = (0, once_1.default)(child, 'exit', { signal });
    try {
        const result = await Promise.race([onPort, onPortFile, onExit]);
        if (isPortInfo(result)) {
            return {
                port: result.port,
                pid: child.pid,
            };
        }
        else if (Array.isArray(result)) {
            // Got "exit" event from child process
            throw new Error(`Failed to start dev server for "${entrypoint}" (code=${result[0]}, signal=${result[1]})`);
        }
        else {
            throw new Error('Unexpected error');
        }
    }
    finally {
        controller.abort();
    }
};
exports.startDevServer = startDevServer;
async function waitForPortFile(opts) {
    while (!opts.signal.aborted) {
        await new Promise((resolve) => setTimeout(resolve, 100));
        try {
            const port = Number(await readFile(opts.portFile, 'ascii'));
            unlink(opts.portFile).catch((_) => {
                console.error('Could not delete port file: %j', opts.portFile);
            });
            return { port };
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                throw err;
            }
        }
    }
}
//# sourceMappingURL=start-dev-server.js.map