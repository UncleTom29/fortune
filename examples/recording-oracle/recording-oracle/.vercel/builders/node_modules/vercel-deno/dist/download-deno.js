"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadDeno = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const node_fetch_1 = __importDefault(require("node-fetch"));
const unzip_1 = require("./unzip");
const { mkdir, stat } = fs_1.default.promises;
const PLATFORM_MAP = new Map([
    ['darwin', 'apple-darwin'],
    ['linux', 'unknown-linux-gnu'],
    ['win32', 'pc-windows-msvc'],
]);
const ARCH_MAP = new Map([
    ['x64', 'x86_64'],
    ['arm64', 'aarch64'],
]);
async function downloadDeno(denoDir, version, nodePlatform, nodeArch) {
    const platform = PLATFORM_MAP.get(nodePlatform);
    if (!platform) {
        throw new Error(`Unsupported operating system: "${nodePlatform}"`);
    }
    const arch = ARCH_MAP.get(nodeArch);
    if (!arch) {
        throw new Error(`Unsupported CPU architecture: "${nodeArch}"`);
    }
    const ext = platform === 'win32' ? '.exe' : '';
    const dir = (0, path_1.join)(denoDir, `bin-${arch}-${platform}-${version}`);
    const bin = (0, path_1.join)(dir, `deno${ext}`);
    try {
        // If the Deno binary exists then it's already been downloaded,
        // so no need to download again. TODO: shasum verification
        await stat(bin);
    }
    catch (err) {
        if (err.code !== 'ENOENT')
            throw err;
        const url = `https://github.com/denoland/deno/releases/download/${version}/deno-${arch}-${platform}.zip`;
        await mkdir(dir, { recursive: true });
        console.log(`Downloading Deno ${version} (${arch}-${platform})â€¦`);
        const res = await (0, node_fetch_1.default)(url);
        if (!res.ok) {
            throw new Error(`Failed to download Deno from ${url}: ${res.status}`);
        }
        const zipBuffer = await res.buffer();
        await (0, unzip_1.unzip)(zipBuffer, dir);
    }
    return { dir };
}
exports.downloadDeno = downloadDeno;
//# sourceMappingURL=download-deno.js.map