"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const arg_1 = __importDefault(require("arg"));
const ramda_1 = require("ramda");
const shell_args_1 = require("shell-args");
function parse(data) {
    let argv = [];
    const env = {};
    const firstLine = data.split('\n', 1)[0];
    if (firstLine.startsWith('#!')) {
        const shebang = firstLine.substring(2);
        const args = (0, shell_args_1.bashShellParse)(shebang);
        // Slice off the beginning args until an option is found
        let start = 0;
        for (; start < args.length; start++) {
            const arg = args[start];
            if (arg.startsWith('-')) {
                // Found an option, so stop searching
                break;
            }
            const eqIndex = arg.indexOf('=');
            if (eqIndex !== -1) {
                // Found an env var, so add it to the map
                const name = arg.slice(0, eqIndex);
                const value = arg.slice(eqIndex + 1);
                env[name] = value;
            }
        }
        argv = args.slice(start);
    }
    const args = (0, arg_1.default)({
        '--cert': String,
        '--config': String,
        '-c': '--config',
        '--import-map': String,
        '--lock': String,
        '--unstable': Boolean,
        // `vercel-deno` specific flags
        '--version': String,
        '--include-files': [String],
    }, { argv, permissive: true });
    function* iterator() {
        for (const key of (0, ramda_1.keys)(this)) {
            if (key === '_')
                continue;
            const val = this[key];
            if (typeof val === 'boolean' && val) {
                yield key;
            }
            else if (typeof val === 'string') {
                yield key;
                yield val;
            }
        }
        yield* this._;
    }
    Object.defineProperty(args, Symbol.iterator, {
        value: iterator,
    });
    Object.defineProperty(args, 'env', {
        value: env,
        enumerable: true,
    });
    return args;
}
exports.parse = parse;
//# sourceMappingURL=shebang.js.map